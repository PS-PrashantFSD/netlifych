{"ast":null,"code":"import React from 'react';\nimport useCursorStyle from '../../hooks/useCursorStyle';\nconst StickyCursor = _ref => {\n  let {\n    children: childrenProp,\n    sticky = true\n  } = _ref;\n  const childRef = React.useRef(null);\n  const {\n    lockCursorPosition\n  } = useCursorStyle();\n  const children = React.Children.map(childrenProp, child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n    const {\n      onMouseEnter,\n      onMouseLeave\n    } = child.props;\n    const handleMouseEnter = event => {\n      if (!childRef.current) return;\n      const position = childRef.current.getBoundingClientRect();\n      const x = position.width / 2 + position.left;\n      const y = position.height / 2 + position.top;\n      lockCursorPosition({\n        x,\n        y\n      });\n      if (onMouseEnter) {\n        onMouseEnter(event);\n      }\n    };\n    const handleMouseLeave = event => {\n      if (!childRef.current) return;\n      lockCursorPosition(null);\n      if (onMouseLeave) {\n        onMouseLeave(event);\n      }\n    };\n    const handleRef = node => {\n      // Keep your own reference\n      childRef.current = node;\n\n      // Call the original ref, if any\n      const {\n        ref\n      } = child;\n      if (typeof ref === 'function') {\n        ref(node);\n      } else if (ref !== null) {\n        ref.current = node;\n      }\n    };\n    return /*#__PURE__*/React.cloneElement(child, {\n      onMouseEnter: handleMouseEnter,\n      onMouseLeave: handleMouseLeave,\n      ref: handleRef\n    });\n  });\n  return sticky ? children : childrenProp;\n};\nexport default /*#__PURE__*/React.memo(StickyCursor);","map":null,"metadata":{},"sourceType":"module"}