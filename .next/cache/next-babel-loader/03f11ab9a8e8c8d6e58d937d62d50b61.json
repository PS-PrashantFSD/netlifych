{"ast":null,"code":"import React from 'react';\nimport { ThemeContext } from 'styled-components';\nconst useMediaQuery = queryInput => {\n  const theme = React.useContext(ThemeContext);\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, '');\n  const isClientSide = false;\n  const defaultMatches = false;\n  const matchMedia = isClientSide ? window.matchMedia : null;\n  const [match, setMatch] = React.useState(() => {\n    if (isClientSide) {\n      return matchMedia(query).matches;\n    }\n\n    // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n    return defaultMatches;\n  });\n  React.useEffect(() => {\n    if (!isClientSide) {\n      return undefined;\n    }\n    const queryList = matchMedia(query);\n    const updateMatch = () => {\n      setMatch(queryList.matches);\n    };\n    updateMatch();\n    queryList.addEventListener('change', updateMatch);\n    return () => {\n      queryList.removeEventListener('change', updateMatch);\n    };\n  }, [query, matchMedia, isClientSide]);\n  return match;\n};\nexport default useMediaQuery;","map":{"version":3,"names":["React","ThemeContext","useMediaQuery","queryInput","theme","useContext","query","replace","isClientSide","defaultMatches","matchMedia","window","match","setMatch","useState","matches","useEffect","undefined","queryList","updateMatch","addEventListener","removeEventListener"],"sources":["C:/Users/Prashant/Desktop/Projects/netlifych/hooks/useMediaQuery.js"],"sourcesContent":["import React from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nconst useMediaQuery = (queryInput) => {\r\n  const theme = React.useContext(ThemeContext);\r\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\r\n  query = query.replace(/^@media( ?)/m, '');\r\n\r\n  const isClientSide = typeof window !== 'undefined';\r\n  const defaultMatches = false;\r\n  const matchMedia = isClientSide ? window.matchMedia : null;\r\n\r\n  const [match, setMatch] = React.useState(() => {\r\n    if (isClientSide) {\r\n      return matchMedia(query).matches;\r\n    }\r\n\r\n    // Once the component is mounted, we rely on the\r\n    // event listeners to return the correct matches value.\r\n    return defaultMatches;\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (!isClientSide) {\r\n      return undefined;\r\n    }\r\n\r\n    const queryList = matchMedia(query);\r\n    const updateMatch = () => {\r\n      setMatch(queryList.matches);\r\n    };\r\n\r\n    updateMatch();\r\n    queryList.addEventListener('change', updateMatch);\r\n\r\n    return () => {\r\n      queryList.removeEventListener('change', updateMatch);\r\n    };\r\n  }, [query, matchMedia, isClientSide]);\r\n\r\n  return match;\r\n};\r\n\r\nexport default useMediaQuery;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,mBAAmB;AAEhD,MAAMC,aAAa,GAAIC,UAAU,IAAK;EACpC,MAAMC,KAAK,GAAGJ,KAAK,CAACK,UAAU,CAACJ,YAAY,CAAC;EAC5C,IAAIK,KAAK,GAAG,OAAOH,UAAU,KAAK,UAAU,GAAGA,UAAU,CAACC,KAAK,CAAC,GAAGD,UAAU;EAC7EG,KAAK,GAAGA,KAAK,CAACC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;EAEzC,MAAMC,YAAY,QAAgC;EAClD,MAAMC,cAAc,GAAG,KAAK;EAC5B,MAAMC,UAAU,GAAGF,YAAY,GAAGG,MAAM,CAACD,UAAU,GAAG,IAAI;EAE1D,MAAM,CAACE,KAAK,EAAEC,QAAQ,CAAC,GAAGb,KAAK,CAACc,QAAQ,CAAC,MAAM;IAC7C,IAAIN,YAAY,EAAE;MAChB,OAAOE,UAAU,CAACJ,KAAK,CAAC,CAACS,OAAO;IAClC;;IAEA;IACA;IACA,OAAON,cAAc;EACvB,CAAC,CAAC;EAEFT,KAAK,CAACgB,SAAS,CAAC,MAAM;IACpB,IAAI,CAACR,YAAY,EAAE;MACjB,OAAOS,SAAS;IAClB;IAEA,MAAMC,SAAS,GAAGR,UAAU,CAACJ,KAAK,CAAC;IACnC,MAAMa,WAAW,GAAGA,CAAA,KAAM;MACxBN,QAAQ,CAACK,SAAS,CAACH,OAAO,CAAC;IAC7B,CAAC;IAEDI,WAAW,CAAC,CAAC;IACbD,SAAS,CAACE,gBAAgB,CAAC,QAAQ,EAAED,WAAW,CAAC;IAEjD,OAAO,MAAM;MACXD,SAAS,CAACG,mBAAmB,CAAC,QAAQ,EAAEF,WAAW,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,CAACb,KAAK,EAAEI,UAAU,EAAEF,YAAY,CAAC,CAAC;EAErC,OAAOI,KAAK;AACd,CAAC;AAED,eAAeV,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module"}