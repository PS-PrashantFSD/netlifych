{"ast":null,"code":"import React from 'react';\nconst setRef = (ref, value) => {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n};\nconst useForkRef = (refA, refB) =>\n/**\r\n * This will create a new function if the ref props change and are defined.\r\n * This means react will call the old forkRef with `null` and the new forkRef\r\n * with the ref. Cleanup naturally emerges from this behavior.\r\n */\nReact.useMemo(() => {\n  if (refA == null && refB == null) {\n    return null;\n  }\n  return refValue => {\n    setRef(refA, refValue);\n    setRef(refB, refValue);\n  };\n}, [refA, refB]);\nexport default useForkRef;","map":null,"metadata":{},"sourceType":"module"}