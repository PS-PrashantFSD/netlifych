{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst storageKey = '@AwwwardsRebuilt:Theme';\nconst INITIAL_STATE = {\n  theme: 'dark'\n};\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    case 'TOGGLE_THEME':\n      {\n        const newTheme = state.theme === 'dark' ? 'light' : 'dark';\n        window.localStorage.setItem(storageKey, newTheme);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          theme: newTheme\n        });\n      }\n    case 'SET_THEME':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          theme: action.payload\n        });\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const ThemeContext = /*#__PURE__*/React.createContext();\nexport function ThemeContextProvider({\n  children\n}) {\n  const [state, dispatch] = React.useReducer(rootReducer, INITIAL_STATE);\n  const store = React.useMemo(() => ({\n    state,\n    dispatch\n  }), [state]);\n  React.useEffect(() => {\n    dispatch({\n      type: 'SET_THEME',\n      payload: window.localStorage.getItem(storageKey) || 'dark'\n    });\n  }, []);\n  return /*#__PURE__*/_jsx(ThemeContext.Provider, {\n    value: store,\n    children: children\n  });\n}\nexport const useThemeContext = () => {\n  const {\n    state,\n    dispatch\n  } = React.useContext(ThemeContext);\n  return [state, dispatch];\n};","map":null,"metadata":{},"sourceType":"module"}