{"ast":null,"code":"import React from 'react';\nimport { useAnimation } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\nconst transition = {\n  delay: 0.3,\n  translateY: {\n    duration: 1,\n    ease: [0, 0.7, 0.29, 0.97]\n  },\n  opacity: {\n    duration: 1,\n    ease: [0.25, 0.1, 0.25, 1.0]\n  }\n};\nconst variants = {\n  show: {\n    translateY: 0,\n    opacity: 1\n  },\n  hidden: {\n    translateY: 60,\n    opacity: 0\n  }\n};\nconst AnimateOnScreen = ({\n  children: childrenProp\n}) => {\n  const animation = useAnimation();\n  const [inViewRef, inView] = useInView({\n    triggerOnce: true\n  });\n  React.useEffect(() => {\n    if (inView) {\n      animation.start('show');\n    }\n  }, [animation, inView, inViewRef]);\n  const children = React.Children.map(childrenProp, child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n    const handleRef = node => {\n      // Keep your own reference\n      inViewRef(node);\n\n      // Call the original ref, if any\n      const {\n        ref\n      } = child;\n      if (typeof ref === 'function') {\n        ref(node);\n      } else if (ref !== null) {\n        ref.current = node;\n      }\n    };\n    return /*#__PURE__*/React.cloneElement(child, {\n      variants,\n      transition,\n      animate: animation,\n      initial: 'hidden',\n      ref: handleRef\n    });\n  });\n  return children;\n};\nexport default /*#__PURE__*/React.memo(AnimateOnScreen);","map":null,"metadata":{},"sourceType":"module"}